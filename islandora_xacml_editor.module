<?php

/**
 * @file
 *
 * The main module file for the Islanora XACML Editor
 */

/**
 * Implementation of hook_perm().
 */
function islandora_xacml_editor_perm() {
  return array('Edit XACML Policies');
}

/**
 * Implementaion of hook_menu()
 * @todo Decide on the correct menu paths.
 */
function islandora_xacml_editor_menu() {
  $items = array();

  $items['xacml/%/%'] = array(
    'title' => 'XACML Editor',
    'description' => 'Edit XACML policies for a particular object.',
    'type' => MENU_CALLBACK,
    'page callback' => 'drupal_get_form',
    'page arguments' => array('islandora_xacml_editor_page',1,2),
    'access arguments' => array('Edit XACML Policies'),
  );

  return $items;
}

/**
 * The XACML editing form.
 */
function islandora_xacml_editor_page(&$form_state, $object_pid, $xacml_dsid) {

  module_load_include('inc', 'fedora_repository', 'api/fedora_utils');
  module_load_include('inc', 'fedora_repository', 'api/fedora_item');
  module_load_include('inc', 'islandora_xacml_editor', 'Xacml');

  $form_state['storage']['object_pid'] = $object_pid;
  $form_state['storage']['xacml_dsid'] = $xacml_dsid;

  if(!validPid($object_pid) || !validDsid($xacml_dsid)) {
    drupal_not_found();
    exit();
  }

  $object = new Fedora_Item($object_pid);
  if(!$object->exists()) {
    drupal_not_found();
    exit();
  }

  $datastreams = $object->get_datastreams_list_as_array();

  $mime = array();
  $dsid = array();
  foreach($datastreams as $k => $ds) {
    $mime[$ds['MIMEType']] = $ds['MIMEType'];
    $dsid[$k] = $k;
  }

  // get the user list
  $users = array();
  $result = db_query('SELECT u.uid, u.name FROM {users} u');
  while($user = db_fetch_object($result)) {
    $user->uid == 0 ? : $users[$user->name] = $user->name;
    if($user->uid == 1) {
      $admin_user = $user->name;
      $form_state['storage']['admin_user'] = $user->name;
    }
  }

  // current user
  $form_state['storage']['current_user'] = $GLOBALS['user']->name;

  // get role list
  $roles = array();
  $result = db_query('SELECT r.rid, r.name FROM {role} r');
  while($role = db_fetch_object($result)) {
    $role->rid == 0 ? : $roles[$role->name] = $role->name;
  }

  if(array_key_exists($xacml_dsid, $datastreams)) {
    module_load_include('inc', 'islandora_xacml_editor', 'XacmlException');

    // here we populate the form
    $xml = $object->get_datastream_dissemination($xacml_dsid);

    // some basic error handling
    try {
      $xacml = new Xacml($xml);
    }
    catch(XacmlException $e) {
      drupal_set_message($e->getMessage());
      drupal_set_message("Xacml Parser failed to parse $object_pid/$xacml_dsid. It is likely this POLICY wasn't written by the islandora XACML editor, it will have to be modified by hand.");
      drupal_not_found();
      exit();
    }
  }
  else {
    $xacml = new Xacml();
  }


  // select the admin user and the current user by default
  $selected_users = $GLOBALS['user']->name == $admin_user ? array($admin_user) : array($GLOBALS['user']->name, $admin_user);

  $form = array();

  $form['#tree'] = TRUE;

  $form['access'] = array(
    '#type' => 'fieldset',
    '#title' => t('Object Viewing'),
    '#collapsible' => TRUE,
    '#collapsed' => $access,
  );

  $form['access']['enabled'] = array(
    '#type' => 'checkbox',
    '#title' => t('Enable XACML Restrictions on Object Viewing'),
    '#default_value' => $xacml->viewingRule->isPopulated() ? 1 : 0,
  );

  $form['access']['users'] = array(
    '#type' => 'select',
    '#title' => t('Allowed Users'),
    '#default_value' => $xacml->viewingRule->isPopulated() ? $xacml->viewingRule->getUsers() : $selected_users,
    '#options' => $users,
    '#multiple' => TRUE,
    '#size' => 10,
  );

  $form['access']['roles'] = array(
    '#type' => 'select',
    '#title' => t('Allowed Roles'),
    '#options' => $roles,
    '#multiple' => TRUE,
    '#size' => 10,
    '#default_value' => $xacml->viewingRule->isPopulated() ? $xacml->viewingRule->getRoles() : NULL,
  );

  $form['manage'] = array(
    '#weight' => -1,
    '#type' => 'fieldset',
    '#title' => t('Object Management'),
    '#description' => 'Select the Users and Roles that are allowed to manage this object.
      These users will also be able to view the object even if not explicitly allowed to in the
      object access section.
      WARNING: If you unselect youself you will be locked out of the object.',
    '#collapsible' => FALSE,
  );

  $form['manage']['users'] = array(
    '#type' => 'select',
    '#title' => t('Users'),
    '#options' => $users,
    '#default_value' => $xacml->managementRule->isPopulated() ? $xacml->managementRule->getUsers() : $selected_users,
    '#multiple' => TRUE,
    '#size' => 10
  );

  $form['manage']['roles'] = array(
    '#type' => 'select',
    '#title' => t('Roles'),
    '#default_value' => $xacml->managementRule->isPopulated() ? $xacml->managementRule->getRoles() : NULL,
    '#options' => $roles,
    '#multiple' => TRUE,
    '#size' => 10
  );

  $form['dsidmime'] = array(
    '#type' => 'fieldset',
    '#title' => t('Datastreams and MIME types'),
    '#collapsible' => TRUE,
    '#collapsed' => $xacml->datastreamRule->isPopulated(),
  );

  $form['dsidmime']['enabled'] = array(
    '#type' => 'checkbox',
    '#title' => t('Enable XACML Restrictions on DSIDs and MIME types'),
    '#default_value' => $xacml->datastreamRule->isPopulated() ? 1 : 0,
  );

  $form['dsidmime']['users'] = array(
    '#type' => 'select',
    '#title' => t('Users'),
    '#default_value' => $selected_users,
    '#options' => $users,
    '#multiple' => TRUE,
    '#size' => 10,
    '#default_value' => $xacml->datastreamRule->isPopulated() ? $xacml->datastreamRule->getUsers() : $selected_users,
  );

  $form['dsidmime']['roles'] = array(
    '#type' => 'select',
    '#title' => t('Roles'),
    '#options' => $roles,
    '#multiple' => TRUE,
    '#size' => 10,
    '#default_value' => $xacml->datastreamRule->isPopulated() ? $xacml->datastreamRule->getRoles() : NULL,
  );

  $form['dsidmime']['dsid'] = array(
    '#type' => 'select',
    '#title' => t('DSIDs'),
    '#options' => $dsid,
    '#multiple' => TRUE,
    '#size' => 10,
    '#default_value' => $xacml->datastreamRule->isPopulated() ? $xacml->datastreamRule->getDsids() : NULL,
  );

  $form['dsidmime']['mime'] = array(
    '#type' => 'select',
    '#title' => t('Mimetype'),
    '#options' => $mime,
    '#multiple' => TRUE,
    '#size' => 10,
    '#default_value' => $xacml->datastreamRule->isPopulated() ? $xacml->datastreamRule->getMimetypes() : NULL,
  );

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Set Permissions')
  );

  return $form;
}

function islandora_xacml_editor_page_validate(&$form, &$form_state) {

  // test if the user is locking themselves or the admin out of the object
  $admin_user = $form_state['storage']['admin_user'];
  $current_user = $form_state['storage']['current_user'];

  // management functions
  if(!array_key_exists($admin_user,$form_state['values']['manage']['users']) ||
      !array_key_exists($current_user,$form_state['values']['manage']['users']) )
  {
    if($admin_user == $current_user) {
      form_set_error('manage][users',"Please make sure that $admin_user is selected in the manage
        section to prevent locking yourself out of the object.",FALSE);
    }
    else {
      form_set_error('manage][users',"Please make sure that $admin_user and $current_user are selected in the manage
        section to prevent locking yourself and the admin user out of the object.",FALSE);
    }
  }
}

/**
 * The submit function where all the XACML magic happens. Abracadabra.
 */
function islandora_xacml_editor_page_submit(&$form, &$form_state) {
  module_load_include('inc', 'islandora_xacml_editor', 'Xacml');
  module_load_include('inc', 'fedora_repository', 'api/fedora_item');

  $xacml = new Xacml();

  // check datastreams and mime
  $values = $form_state['values']['dsidmime'];
  if( $values['enabled'] ) {
    $xacml->datastreamRule->addMimetype($values['mime']);
    $xacml->datastreamRule->addDsid($values['dsid']);
    $xacml->datastreamRule->addUser($values['users']);
    $xacml->datastreamRule->addRole($values['roles']);
  }

  // check admin (always have this rule)
  $values = $form_state['values']['manage'];
  $xacml->managementRule->addUser($values['users']);
  $xacml->managementRule->addRole($values['roles']);

  // check access
  $values = $form_state['values']['access'];
  if( $values['enabled'] ) {
    $xacml->viewingRule->addUser($values['users']);
    $xacml->viewingRule->addRole($values['roles']);
  }

  $xml = $xacml->getXmlString();
  $pid = $form_state['storage']['object_pid'];
  $dsid = $form_state['storage']['xacml_dsid'];

  $object = new Fedora_Item($pid);
  $datastreams = $object->get_datastreams_list_as_array();

  if(array_key_exists($dsid, $datastreams)) {
    $object->modify_datastream_by_value($xml, $dsid, 'Xacml Policy Stream', 'text/xml');
  }
  else {
    $object->add_datastream_from_string($xml, $dsid, 'Xacml Policy Stream', 'text/xml', 'X');
  }

  unset($form_state['storage']);
  $form_state['redirect'] = array("fedora/repository/$pid");
}
