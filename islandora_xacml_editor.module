<?php

/**
 * @file
 *
 * The main module file for the Islanora XACML Editor
 */

/**
 * Implementation of hook_perm().
 */
function islandora_xacml_editor_perm() {
  return array('Edit XACML Policies');
}

/**
 * Implementaion of hook_menu()
 * @todo Decide on the correct menu paths.
 */
function islandora_xacml_editor_menu() {
  $items = array();

  $items['xacml/%/%'] = array(
    'title' => 'XACML Editor',
    'description' => 'Edit XACML policies for a particular object.',
    'type' => MENU_CALLBACK,
    'page callback' => 'drupal_get_form',
    'page arguments' => array('islandora_xacml_editor_page',1,2),
    'access arguments' => array('Edit XACML Policies'),
  );

  return $items;
}

/**
 * The XACML editing form.
 */
function islandora_xacml_editor_page(&$form_state, $object_pid, $xacml_dsid) {
  module_load_include('inc', 'fedora_repository', 'api/fedora_utils');
  module_load_include('inc', 'fedora_repository', 'api/fedora_item');

  // setup the form for our confirmation screen
  if (!isset($form_state['storage']['step'])) {
    $form_state['storage']['step'] = 1;
    $form_state['rebuild'] = TRUE;
  }

  if(!validPid($object_pid) || !validDsid($xacml_dsid)) {
    drupal_not_found();
    exit();
  }

  $object = new Fedora_Item($object_pid);
  if(!$object->exists()) {
    drupal_not_found();
    exit();
  }

  $datastreams = $object->get_datastreams_list_as_array();

  $mime = array();
  $dsid = array();
  foreach($datastreams as $k => $ds) {
    $mime[$ds['MIMEType']] = $ds['MIMEType'];
    $dsid[$k] = $k;
  }

  // get the user list
  $users = array();
  $result = db_query('SELECT u.uid, u.name FROM {users} u');
  while($user = db_fetch_object($result)) {
    $user->uid == 0 ? : $users[$user->name] = $user->name;
    if($user->uid == 1) {
      $admin_user = $user->name;
    }
  }

  // get role list
  $roles = array();
  $result = db_query('SELECT r.rid, r.name FROM {role} r');
  while($role = db_fetch_object($result)) {
    //$roles[$role->rid] = $role->name;
    $role->rid == 0 ? : $roles[$role->name] = $role->name;
  }

  if(array_key_exists($xacml_dsid, $datastreams)) {
    // here we should populate the form
  }
  else {
    // select the admin user and the current user by default
    $selected_users = $GLOBALS['user']->name == $admin_user ? array($admin_user) : array($GLOBALS['user']->name, $admin_user);
  }

  $form = array();

  $form['#tree'] = TRUE;

  if($form_state['storage']['step'] == 2) {
    $form['warning'] = array(
      '#value' => 'holy shit!!!',
      '#weight' => -2,
    );
  }

  $form['access'] = array(
    '#type' => 'fieldset',
    '#title' => t('Object Viewing'),
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
  );

  $form['access']['enabled'] = array(
    '#type' => 'checkbox',
    '#title' => t('Enable XACML Restrictions on Object Viewing'),
    '#default' => $form_state['storage']['step'] == 2 ? $form_state['values']['access']['enabled'] : '',
  );

  $form['access']['users'] = array(
    '#type' => 'select',
    '#title' => t('Allowed Users'),
    '#default_value' => $selected_users,
    '#options' => $users,
    '#multiple' => TRUE,
    '#size' => 10
  );

  $form['access']['roles'] = array(
    '#type' => 'select',
    '#title' => t('Allowed Roles'),
    '#options' => $roles,
    '#multiple' => TRUE,
    '#size' => 10
  );

  $form['manage'] = array(
    '#weight' => -1,
    '#type' => 'fieldset',
    '#title' => t('Object Management'),
    '#description' => 'Select the Users and Roles that are allowed to manage this object.
      These users will also be able to view the object even if not explicitly allowed to in the 
      object access section.
      WARNING: If you unselect youself you will be locked out of the object.',
    '#collapsible' => FALSE,
    '#collapsed' => FALSE,
  );

  $form['manage']['users'] = array(
    '#type' => 'select',
    '#title' => t('Users'),
    '#options' => $users,
    '#default_value' => $selected_users,
    '#multiple' => TRUE,
    '#size' => 10
  );

  $form['manage']['roles'] = array(
    '#type' => 'select',
    '#title' => t('Roles'),
    '#options' => $roles,
  //  '#default_value' => $selected_roles,
    '#multiple' => TRUE,
    '#size' => 10
  );

  $form['dsidmime'] = array(
    '#type' => 'fieldset',
    '#title' => t('Datastreams and MIME types'),
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
  );

  $form['dsidmime']['enabled'] = array(
    '#type' => 'checkbox',
    '#title' => t('Enable XACML Restrictions on DSIDs and MIME types'),
  );

  $form['dsidmime']['users'] = array(
    '#type' => 'select',
    '#title' => t('Users'),
    '#default_value' => $selected_users,
    '#options' => $users,
    '#multiple' => TRUE,
    '#size' => 10
  );

  $form['dsidmime']['roles'] = array(
    '#type' => 'select',
    '#title' => t('Roles'),
    '#options' => $roles,
    '#multiple' => TRUE,
    '#size' => 10
  );

  $form['dsidmime']['dsid'] = array(
    '#type' => 'select',
    '#title' => t('DSIDs'),
    '#options' => $dsid,
    '#multiple' => TRUE,
    '#size' => 10
  );

  $form['dsidmime']['mime'] = array(
    '#type' => 'select',
    '#title' => t('Mimetype'),
    '#options' => $mime,
    '#multiple' => TRUE,
    '#size' => 10
  );

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Set Permissions')
  );

  return $form;
}

function islandora_xacml_editor_new_rule($id = 'Generic-Rule-578', $effect = 'Deny') {
  $rule = array();

  $rule['id'] = $id;
  $rule['effect'] = $effect;

  $rule['dsids'] = array();
  $rule['mimes'] = array();
  $rule['methods'] = array();
  $rule['users'] = array();
  $rule['roles'] = array();

  return $rule;
}

/**
 * The submit function where all the XACML magic happens. Abra
 */
function islandora_xacml_editor_page_submit(&$form, &$form_state) {

  module_load_include('inc', 'islandora_xacml_editor', 'XacmlWriter');

  $form_state['storage']['step'] = 2;

  // create the rule array
  $xacml = array(
    'PolicyId'           => 'islandora-xacml-editor-v1',
    'RuleCombiningAlgId' => 'urn:oasis:names:tc:xacml:1.0:rule-combining-algorithm:first-applicable',
    'rules'              => array(),
  );

  // check datastreams and mime
  $values = $form_state['values']['dsidmime'];
  if( $values['enabled'] ) {
    $rule = islandora_xacml_editor_new_rule('deny-dsid-mime');
    $rule['mimes'] = $values['mime'];
    $rule['dsids'] = $values['dsid'];
    $rule['users'] = $values['users'];
    $rule['roles'] = $values['roles'];
    $rule['methods'][] = 'getDatastreamDissemination';
    $xacml['rules'][] = $rule;
  }

  // check admin (always have this rule)
  $values = $form_state['values']['manage'];
  $rule = islandora_xacml_editor_new_rule('deny-management-functions');
  $rule['users'] = $values['users'];
  $rule['roles'] = $values['roles'];
  $rule['methods'] = array(
    'ingest',
    'modifyDatastreamByReference',
    'modifyDatastreamByValue',
    'modifyDisseminator',
    'purgeObject',
    'purgeDatastream',
    'purgeDisseminator',
    'setDatastreamState',
    'setDisseminatorState',
    'setDatastreamVersionable',
    'addDatastream',
    'addDisseminator'
  );
  $xacml['rules'][] = $rule;

  // check access
  $values = $form_state['values']['access'];
  if( $values['enabled'] ) {
    $rule = islandora_xacml_editor_new_rule('deny-access-functions');
    $rule['users'] = $values['users'];
    $rule['roles'] = $values['roles'];
    $rule['methods'] = array(
      'api-a',
      'getDatastreamHistory'
    );
    $xacml['rules'][] = $rule;
  }

  $xml = XacmlWriter::toXML($xacml, TRUE);

  dpm($xml);
  dpm($xacml);
}