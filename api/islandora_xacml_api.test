<?php

/**
 *  @file
 *  All tests associated with the Islandora Xacml Api module
 */

module_load_include('inc', 'fedora_repository', 'fedora_repository.test');

class IslandoraXacmlApiTestCase extends IslandoraTestCase {
  
  public static function getInfo() {
    return array(
      'name' => 'Islandora Xacml Api Test Case',
      'description' => "Functional tests for the Islandora Xacml Api.",
      'group' => 'Xacml Editor',
    );
  }

  protected function getModuleName() {
    return 'islandora_xacml_api';
  }

  /**
   *  Validates hook_menu() results.
   */
  public function testIslandoraXacmlApiMenu() {
    // vars to test schema
    $main_page = 'admin/settings/islandora_xacml'; 
    $api_page = $main_page . '/api';
    $title = 'title';
    $dsc = 'description';
    $access_args = 'access arguments';
    $perm = 'administer islandora_xacml_api';

    // Invoke the hook
    $results = $this->invoke('menu');

    /**
     *  Assert the schema of the results of the hook
     */
    $this->assertNotNull($results, "Hook returns non-null value.");
    $this->assertTrue(is_array($results), "Hook returns an array.");

    // admin/settings/islandora_xacml page
    $this->assertTrue(array_key_exists($main_page, $results), "Returned array contains $main_page key.");
    $this->assertTrue(is_array($results[$main_page]), "Value associated with $main_page is an array.");
    $this->assertTrue(array_key_exists($title, $results[$main_page]), "$main_page array has $title key");
    $this->assertTrue($results[$main_page][$title], "Value associated with $title evaluates to TRUE");
    $this->assertTrue(is_string($results[$main_page][$title]), "Value associated with $title is a string");
    $this->assertTrue(array_key_exists($dsc, $results[$main_page]), "$main_page array has $dsc key");
    $this->assertTrue($results[$main_page][$dsc], "Value associated with $dsc evaluates to TRUE");
    $this->assertTrue(is_string($results[$main_page][$dsc]), "Value associated with $dsc is a string");
    $this->assertTrue(array_key_exists($access_args, $results[$main_page]), "$main_page array has $access_args key");
    $this->assertTrue($results[$main_page][$access_args], "Value associated with $access_args evaluates to TRUE");
    $this->assertTrue(is_array($results[$main_page][$access_args]), "Value associated with $access_args is an array");
    $this->assertTrue(in_array($perm, $results[$main_page][$access_args]), "$access_args array contains $perm");

    // admin/settings/islandora_xacml/api page
    $this->assertTrue(array_key_exists($api_page, $results), "Returned array contains $api_page key.");
    $this->assertTrue(is_array($results[$api_page]), "Value associated with $api_page is an array.");
    $this->assertTrue(array_key_exists($title, $results[$api_page]), "$api_page array has $title key");
    $this->assertTrue($results[$api_page][$title], "Value associated with $title evaluates to TRUE");
    $this->assertTrue(is_string($results[$api_page][$title]), "Value associated with $title is a string");
    $this->assertTrue(array_key_exists($dsc, $results[$api_page]), "$api_page array has $dsc key");
    $this->assertTrue($results[$api_page][$dsc], "Value associated with $dsc evaluates to TRUE");
    $this->assertTrue(is_string($results[$api_page][$dsc]), "Value associated with $dsc is a string");
    $this->assertTrue(array_key_exists($access_args, $results[$api_page]), "$api_page array has $access_args key");
    $this->assertTrue($results[$api_page][$access_args], "Value associated with $access_args evaluates to TRUE");
    $this->assertTrue(is_array($results[$api_page][$access_args]), "Value associated with $access_args is an array");
    $this->assertTrue(in_array($perm, $results[$api_page][$access_args]), "$access_args array contains $perm");
  }

  /**
   *  Validates hook_perm() results.
   */
  public function testIslandoraXacmlApiPerm() {
    // vars to test schema
    $expected_perms = array('administer islandora_xacml_api', 'Manage XACML API settings.');

    // Invoke the hook
    $results = $this->invoke('perm');
    
    //Validate the result
    $this->assertNotNull($results, "Hook returns non-null value.");
    $this->assertTrue(is_array($results), "Hook returns an array.");
    foreach ($expected_perms as $perm) {
      $this->assertTrue(in_array($perm, $results), "Array contains $perm permission.");
    }
  }

  public function testIslandoraXacmlApiSettings() {
    // Invoke the hook
    $results = $this->invoke('settings');

    // array keys
    $rels_viewable_user = 'islandora_xacml_api_rels_viewable_user';
    $rels_viewable_role = 'islandora_xacml_api_rels_viewable_role';
    $save_relationships = 'islandora_xacml_api_save_relationships';
    $type = '#type';
    $title = '#title';
    $default_value = '#default_value';
    
    /**
     *  Validate the schema of the returned results
     */ 

    // Top level results
    $this->assertNotNull($results, "Returned value is not null.");
    $this->assertTrue(is_array($results), "Returned value is an array.");

    // rels_viewable_user field
    $this->assertTrue(array_key_exists($rels_viewable_user, $results), "Returned array has $rels_viewable_user key");
    $viewable_user_array = $results[$rels_viewable_user];
    $this->assertNotNull($viewable_user_array, "$rels_viewable_user value is not null");
    $this->assertTrue($viewable_user_array, "$rels_viewable_user value is an array");
    $this->assertTrue(array_key_exists($type, $viewable_user_array), "$rels_viewable_user array has $type key");
    $this->assertNotNull($viewable_user_array[$type], "$rels_viewable_user's $type value is not null");
    $this->assertTrue(is_string($viewable_user_array[$type]), "$rels_viewable_user's $type value is a string");
    $this->assertTrue($viewable_user_array[$type], "$rels_viewable_user's $type is not a blank string");
    $this->assertTrue(array_key_exists($title, $viewable_user_array), "$rels_viewable_user array has $title key");
    $this->assertNotNull($viewable_user_array[$title], "$rels_viewable_user's $title value is not null");
    $this->assertTrue(is_string($viewable_user_array[$title]), "$rels_viewable_user's $title value is a string");
    $this->assertTrue($viewable_user_array[$title], "$rels_viewable_user's $title is not a blank string");
    $this->assertTrue(array_key_exists($default_value, $viewable_user_array), "$rels_viewable_user array has $default_value key");
    $this->assertNotNull($viewable_user_array[$default_value], "$rels_viewable_user's $default_value value is not null");
    $this->assertTrue(is_string($viewable_user_array[$default_value]), "$rels_viewable_user's $default_value value is a string");
    $this->assertTrue($viewable_user_array[$default_value], "$rels_viewable_user's $default_value is not a blank string");

    // rels_viewable_role field
    $this->assertTrue(array_key_exists($rels_viewable_role, $results), "Returned array has $rels_viewable_role key");
    $viewable_role_array = $results[$rels_viewable_role];
    $this->assertNotNull($viewable_role_array, "$rels_viewable_role value is not null");
    $this->assertTrue($viewable_role_array, "$rels_viewable_role value is an array");
    $this->assertTrue(array_key_exists($type, $viewable_role_array), "$rels_viewable_role array has $type key");
    $this->assertNotNull($viewable_role_array[$type], "$rels_viewable_role's $type value is not null");
    $this->assertTrue(is_string($viewable_role_array[$type]), "$rels_viewable_role's $type value is a string");
    $this->assertTrue($viewable_role_array[$type], "$rels_viewable_role's $type is not a blank string");
    $this->assertTrue(array_key_exists($title, $viewable_role_array), "$rels_viewable_role array has $title key");
    $this->assertNotNull($viewable_role_array[$title], "$rels_viewable_role's $title value is not null");
    $this->assertTrue(is_string($viewable_role_array[$title]), "$rels_viewable_role's $title value is a string");
    $this->assertTrue($viewable_role_array[$title], "$rels_viewable_role's $title is not a blank string");
    $this->assertTrue(array_key_exists($default_value, $viewable_role_array), "$rels_viewable_role array has $default_value key");
    $this->assertNotNull($viewable_role_array[$default_value], "$rels_viewable_role's $default_value value is not null");
    $this->assertTrue(is_string($viewable_role_array[$default_value]), "$rels_viewable_role's $default_value value is a string");
    $this->assertTrue($viewable_role_array[$default_value], "$rels_viewable_role's $default_value is not a blank string");
    
    // save_relationships field
    $this->assertTrue(array_key_exists($save_relationships, $results), "Returned array has $save_relationships key");
    $save_relationships_array = $results[$save_relationships];
    $this->assertNotNull($save_relationships_array, "$save_relationships value is not null");
    $this->assertTrue($save_relationships_array, "$save_relationships value is an array");
    $this->assertTrue(array_key_exists($type, $save_relationships_array), "$save_relationships array has $type key");
    $this->assertNotNull($save_relationships_array[$type], "$save_relationships's $type value is not null");
    $this->assertTrue(is_string($save_relationships_array[$type]), "$save_relationships's $type value is a string");
    $this->assertTrue($save_relationships_array[$type], "$save_relationships's $type is not a blank string");
    $this->assertTrue(array_key_exists($title, $save_relationships_array), "$save_relationships array has $title key");
    $this->assertNotNull($save_relationships_array[$title], "$save_relationships's $title value is not null");
    $this->assertTrue(is_string($save_relationships_array[$title]), "$save_relationships's $title value is a string");
    $this->assertTrue($save_relationships_array[$title], "$save_relationships's $title is not a blank string");
    $this->assertTrue(array_key_exists($default_value, $save_relationships_array), "$save_relationships array has $default_value key");
    $this->assertNotNull($save_relationships_array[$default_value], "$save_relationships's $default_value value is not null");

  }

  /**
   *  Validates hook_islandora_collection_query_alter() results.
   */
  public function testIslandoraXacmlEditorIslandoraCollectionQueryAlter() {
    // hook parameters
    $query = '';
    $pid = "SOME_PID";

    // invoke the hook
    // use drupal alter instead, since it's supposed to take $query by reference
    drupal_alter('islandora_collection_query', &$query, $pid);

    $this->assertNotNull($query, "Hook altered results are non-null.");
    $this->assertTrue(is_string($query), "Hook altered results are a string.");
    $this->assertTrue($query, "Altered string is not empty.");
  }



}
