<?php

class IslandoraXacmlApiUnitTestCase extends DrupalUnitTestCase {

  public static function getInfo() {
    return array(
      'name' => 'Islandora Xacml Api Unit Tests',
      'description' => 'Unit tests for the Islandora Xacml Api',
      'group' => 'Xacml Editor',
    );
  }

  /**
   *  Verify the construction of an Xacml object when no arguments are supplied
   */
  function testDefaultConstructorWithNoArgs() {

    // for Xacml
    module_load_include('inc', 'islandora_xacml_api', 'Xacml'); 

    // instantiate the xacml object
    $xacml = new Xacml();

    // get an DOMXPath to search the Xacml
    $xpath = $this->constructXPathForXacml($xacml);

    /*
     * test structure
     */
    $this->inspectRootNode($xpath);

    $this->inspectEmptyTarget($xpath, "/ns:Policy/ns:Target" );

    $this->inspectAllowEverythingElseRule($xpath);
  }

  /**
   *  Instantiates and returns a DOMXPath object for the supplied Xacml object.
   *
   *  @param Xacml $xacml
   *    The xacml object that the DOMXPath will search
   *
   *  @return DOMXPath
   *    The DOMXPath to search the supplied Xacml object
   */
  private function constructXPathForXacml($xacml) {
    
    // XACML policy namespace
    $ns = 'urn:oasis:names:tc:xacml:1.0:policy';
    
    // create the xpath
    $xpath = new DOMXPath($xacml->getDomDocument());
    
    // register the namespace   
    $xpath->registerNamespace("ns", $ns);

    return $xpath;
  }

  /**
   *  Asserts on the structure of the root node of an xacml policy.
   *  Looks for a root node named 'Policy', and ensures it has two
   *  attributes: 'PolicyId' and 'RuleCombiningAlgId'.
   *
   *  @param DOMXPath $xpath
   *    An DOMXPath object for the XACML DOM with namespace registered as 'ns'
   */
  private function inspectRootNode($xpath) {
    // inspect root node
    $query = "/ns:Policy";
    $policy = $xpath->query($query)->item(0);
    $this->assertNotNull($policy, "Root node is not null");
    $this->assertTrue($policy->hasAttributes(), "Root node has attributes");

    // inspect attributes

    // policy id
    $policy_id = $policy->attributes->getNamedItem("PolicyId");
    $this->assertNotNull($policy_id, "Root node has policy id");
    $this->assertTrue($policy_id->nodeValue, "Policy id is not an empty string");

    // rule combining algorithm
    $alg = $policy->attributes->getNamedItem("RuleCombiningAlgId");
    $this->assertNotNull($alg, "Root node has a rule combining algorithm");
    $this->assertTrue($alg->nodeValue, "Rule combining algorithm is not an empty string");
  }

  /**
   *  Asserts on the structure of the empty target provided for specification
   *  compliance when constructing an Xacml object.  Checks to make sure 
   *  there's a 'Target' node which has 'Subjects', 'Resources', and 
   *  'Actions' as children.  These children should contain 'AnySubject', 
   *  'AnyResource', and 'AnyAction' as children, respectively.
   *
   *  @param DOMXPath $xpath
   *    An DOMXPath object for the XACML DOM with namespace registered as 'ns'
   *
   *  @param string $target_path
   *    Path to the empty target's root
   */
  private function inspectEmptyTarget($xpath, $target_path) {
    
    // look for 'Target' node
    $query = $target_path;
    $target = $xpath->query($query)->item(0);
    $this->assertNotNull($target, "Empty target is not null");
    
    // inspect children

    // subjects
    $query .= "/ns:Subjects";
    $subjects = $xpath->query($query)->item(0);
    $this->assertNotNull($subjects, "Default subjects is not null");
    $query .= "/ns:AnySubject";
    $this->assertNotNull($xpath->query($query)->item(0), "Default subject is AnySubject");

    // resources
    $query = "$target_path/ns:Resources";
    $resources = $xpath->query($query)->item(0);
    $this->assertNotNull($resources, "Empty resources is not null");
    $query .= "/ns:AnyResource";
    $this->assertNotNull($xpath->query($query)->item(0), "Default subject is AnyResource");

    // actions
    $query = "$target_path/ns:Actions";
    $actions = $xpath->query($query)->item(0);
    $this->assertNotNull($actions, "Empty actions is not null");
    $query .= "/ns:AnyAction";
    $this->assertNotNull($xpath->query($query)->item(0), "Default subject is AnyAction");
  }

  /**
   *  Asserts the structure of the 'allow-everything-else' rule given to an Xacml
   *  object by default.  Searches based on the attributes of the rule, and asserts
   *  its child is an empty target a la the one given to an empty Xacml object
   *  for conforming to spec.
   *
   *  @param DOMXPath $xpath 
   *    An DOMXPath object for the XACML DOM with namespace registered as 'ns'
   */
  private function inspectAllowEverythingElseRule($xpath) {

    // look for the rule
    // must have attribute 'RuleId' == 'allow-everything-else'
    // and attribute 'Effect' == 'Permit'
    $query = "/ns:Policy/ns:Rule[@RuleId='allow-everything-else' and @Effect='Permit']";
    $rule = $xpath->query($query)->item(0);
    $this->assertNotNull($rule, "Rule to allow everything else exists");

    // the rule should contain an empty target, 
    // just like what is given to the root node by default so
    // the XACML conforms to spec
    $query .= "/ns:Target";
    $this->inspectEmptyTarget($xpath, $query);
  }

  /**
   *  Asserts that a new rule is not populated.
   *
   *  I've yet to determine if this actually IS the desired behavior.
   *  New rules are only given the default fedoraAdmin user and administrator
   *  role if they are populated from an already existing rule.  Otherwise,
   *  they are added only when getRuleArray() is called.  This is performed
   *  in the functions that export the xacml rule, specifically the toXML and
   *  toDOM functions of the Xacml class, so we should be ok.  But it still
   *  all seems a little too brittle for my tastes.
   */
  public function testNewRuleIsNotPopulated() {
    // for Xacml
    module_load_include('inc', 'islandora_xacml_api', 'Xacml'); 

    // instantiate the xacml object
    $xacml = new Xacml();

    // assert that the new rule is not populated
    $this->assertFalse($xacml->managementRule->isPopulated(), "New rule is not populated");
  }

  /**
   *  Asserts that after adding a user, the rule is populated.  
   */
  public function testRuleWithUserIsPopulated() {
    // for Xacml
    module_load_include('inc', 'islandora_xacml_api', 'Xacml'); 

    // instantiate the xacml object
    $xacml = new Xacml();

    // add a user
    $user_name = 'foo';
    $xacml->managementRule->addUser($user_name);

    // assert that rule is now populated
    $this->assertTrue($xacml->managementRule->isPopulated(), "Rule with user is populated");
  }

  /**
   *  Asserts that after adding a role, the rule is populated.
   */
  public function testRuleWithRoleIsPopulated() {
    // for Xacml
    module_load_include('inc', 'islandora_xacml_api', 'Xacml'); 

    // instantiate the xacml object
    $xacml = new Xacml();

    // add a role
    $role_name = 'baz';
    $xacml->managementRule->addRole($role_name);

    // assert that rule is now populated
    $this->assertTrue($xacml->managementRule->isPopulated(), "Rule with role is populated");
  }

  /**
   *  Asserts that after adding both a user and a role, the rule is populated.
   */
  public function testRuleWithBothUserAndRoleIsPopulated() {
    // for Xacml
    module_load_include('inc', 'islandora_xacml_api', 'Xacml'); 

    // instantiate the xacml object
    $xacml = new Xacml();

    // add a user
    $user_name = 'foo';
    $xacml->managementRule->addUser($user_name);

    // add a role
    $role_name = 'baz';
    $xacml->managementRule->addRole($role_name);

    // assert that rule is now populated
    $this->assertTrue($xacml->managementRule->isPopulated(), "Rule with both user and role is populated");
  }

  /**
   *  Asserts that after removing all roles, an XacmlRule with a user is still
   *  considered populated.
   */
  public function testRuleWithUserAfterRemovingRolesIsPopulated() {
    // for Xacml
    module_load_include('inc', 'islandora_xacml_api', 'Xacml'); 

    // instantiate the xacml object
    $xacml = new Xacml();

    // add a user
    $user_name = 'foo';
    $xacml->managementRule->addUser($user_name);

    // add a role
    $role_name = 'baz';
    $xacml->managementRule->addRole($role_name);

    // remove the role
    $xacml->managementRule->removeRole($role_name);

    // assert that rule is still populated
    $this->assertTrue($xacml->managementRule->isPopulated(), "Rule with user after removing roles is populated");
  }

  /**
   *  Asserts that after removing all users, an XacmlRule with a role is still
   *  considered populated.
   */
  public function testRuleWithRoleAfterRemovingUsersIsPopulated() {
    // for Xacml
    module_load_include('inc', 'islandora_xacml_api', 'Xacml'); 

    // instantiate the xacml object
    $xacml = new Xacml();

    // add a user
    $user_name = 'foo';
    $xacml->managementRule->addUser($user_name);

    // add a role
    $role_name = 'baz';
    $xacml->managementRule->addRole($role_name);

    // remove the user
    $xacml->managementRule->removeRole($role_name);

    // assert that rule is still populated
    $this->assertTrue($xacml->managementRule->isPopulated(), "Rule with role after removing users is populated");
  }
  
  /**
   *  Asserts that a rule with users and no roles is not populated after
   *  removing all users.
   */
  public function testEmptyRuleAfterRemovingUsersIsNotPopulated() {
    // for Xacml
    module_load_include('inc', 'islandora_xacml_api', 'Xacml'); 

    // instantiate the xacml object
    $xacml = new Xacml();

    // add a user
    $user_name = 'foo';
    $xacml->managementRule->addUser($user_name);

    // remove the user
    $xacml->managementRule->removeUser($user_name);

    // assert that rule is not populated
    $this->assertFalse($xacml->managementRule->isPopulated(), "Empty rule after removing user is not populated");
  }

  /**
   *  Asserts that a rule with no users and roles is not populated after
   *  removing all roles.
   */
  public function testEmptyRuleAfterRemovingRolesIsNotPopulated() {
    // for Xacml
    module_load_include('inc', 'islandora_xacml_api', 'Xacml'); 

    // instantiate the xacml object
    $xacml = new Xacml();

    // add a role
    $role_name = 'baz';
    $xacml->managementRule->addRole($role_name);

    // remove the role
    $xacml->managementRule->removeRole($role_name);

    // assert that rule is not populated
    $this->assertFalse($xacml->managementRule->isPopulated(), "Empty rule after removing role is not populated");
  }

  /**
   *  Asserts that a rule with no users and roles is not populated after
   *  removing all users and roles.
   */
  public function testEmptyRuleAfterRemovingBothUsersAndRolesIsNotPopulated() {
    // for Xacml
    module_load_include('inc', 'islandora_xacml_api', 'Xacml'); 

    // instantiate the xacml object
    $xacml = new Xacml();

    // add a role
    $role_name = 'baz';
    $xacml->managementRule->addRole($role_name);

    // add a user
    $user_name = 'foo';
    $xacml->managementRule->addUser($user_name);

    // remove the role
    $xacml->managementRule->removeRole($role_name);

    // remove the user
    $xacml->managementRule->removeUser($user_name);
    
    // assert that rule is not populated
    $this->assertFalse($xacml->managementRule->isPopulated(), "Empty rule after removing role and user is not populated");
  }

  /**
   *  Asserts that when a user is added to an XacmlRule, 
   *  that user appears in both the rule's users array and
   *  the resultant DOM.
   */
  public function testAddUserToRule() {
    // for Xacml
    module_load_include('inc', 'islandora_xacml_api', 'Xacml'); 

    // instantiate the xacml object
    $xacml = new Xacml();

    // add a dummy user
    $user_name = 'foo';
    $xacml->managementRule->addUser($user_name);

    // make sure the dummy user is in the users array of the rule
    $this->assertTrue($xacml->managementRule->hasPermission($user_name, array(), FALSE), "User $user_name is in XacmlRule's users array");

    // get an DOMXPath to search the Xacml
    $xpath = $this->constructXPathForXacml($xacml);

    // search the DOM for the dummy user in the management rule
    $query = "/ns:Policy/ns:Rule[@RuleId='deny-management-functions' and @Effect='Deny']/ns:Condition/ns:Apply/ns:Apply/ns:Apply/ns:AttributeValue[text()='$user_name']";
    $results = $xpath->query($query)->item(0);

    // assert
    $this->assertNotNull($results, "The query for user $user_name return non-null results"); 
    $this->assertEqual($results->nodeValue, $user_name, "Search result's nodeValue is equal to '$user_name'");
  }

  /**
   *  Asserts that when users are added to an XacmlRule using an array,
   *  that the users in the rule's users array as well as in the resultant DOM.
   */
  public function testAddUsersToRule() {
    // for Xacml
    module_load_include('inc', 'islandora_xacml_api', 'Xacml'); 

    // instantiate the xacml object
    $xacml = new Xacml();

    // add dummy users using an array
    $user_array = array('foo', 'bar');
    $xacml->managementRule->addUser($user_array);

    // make sure the dummy users are in the users array of the rule
    for ( $i = 0; $i < count($user_array); $i++ ) {
      $this->assertTrue($xacml->managementRule->hasPermission($user_array[$i], array(), FALSE), "User {$user_array[$i]} is in the XacmlRule's users array");
    }

    // get an DOMXPath to search the Xacml
    $xpath = $this->constructXPathForXacml($xacml);

    // search the DOM for the dummy users in the management rule
    // and assert their existence
    for ( $i = 0; $i < count($user_array); $i++ ) {
      $query = "/ns:Policy/ns:Rule[@RuleId='deny-management-functions' and @Effect='Deny']/ns:Condition/ns:Apply/ns:Apply/ns:Apply/ns:AttributeValue[text()='{$user_array[$i]}']";
      $results = $xpath->query($query)->item(0);
     
      $this->assertNotNull($results, "The query for user {$user_array[$i]} return non-null results"); 
      $this->assertEqual($results->nodeValue, $user_array[$i], "Search result's nodeValue is equal to '{$user_array[$i]}'");
    }
    
  }

  /**
   *  Asserts that when a user is removed from an XacmlRule that the user
   *  no longer appears in the rule's users array nor the resultant DOM
   */
  public function testRemoveUserFromRule() {
    // for Xacml
    module_load_include('inc', 'islandora_xacml_api', 'Xacml'); 

    // instantiate the xacml object
    $xacml = new Xacml();

    // add dummy users using an array
    $user_array = array('foo', 'bar');
    $xacml->managementRule->addUser($user_array);

    // remove one of the dummy users
    $xacml->managementRule->removeUser($user_array[0]);

    // assert the removed user is not in the rule,
    // while the other remains
    $rule_users = $xacml->managementRule->getUsers();
    $this->assertFalse(in_array($user_array[0], $rule_users), "User {$user_array[0]} has been removed from rule and is not in users array");
    $this->assertTrue(in_array($user_array[1], $rule_users), "User {$user_array[1]} has not been removed from rule and still is in users array");

    // get an DOMXPath to search the Xacml
    $xpath = $this->constructXPathForXacml($xacml);

    // search the DOM for the removed dummy user in the management rule
    // and ensure it is not present
    $query = "/ns:Policy/ns:Rule[@RuleId='deny-management-functions' and @Effect='Deny']/ns:Condition/ns:Apply/ns:Apply/ns:Apply/ns:AttributeValue[text()='{$user_array[0]}']";
    $results = $xpath->query($query)->item(0);
    $this->assertNull($results, "The query for user {$user_array[0]} returns null results"); 

    // search the DOM for the dummy user that remains and ensure it is present 
    $query = "/ns:Policy/ns:Rule[@RuleId='deny-management-functions' and @Effect='Deny']/ns:Condition/ns:Apply/ns:Apply/ns:Apply/ns:AttributeValue[text()='{$user_array[1]}']";
    $results = $xpath->query($query)->item(0);
    $this->assertNotNull($results, "The query for user {$user_array[1]} return non-null results"); 
    $this->assertEqual($results->nodeValue, $user_array[1], "Search result's nodeValue is equal to '{$user_array[1]}'");
  }

  /**
   *  Asserts that when users are removed from an XacmlRule that they
   *  no longer appear in the rule's users array nor the resultant DOM
   */
  public function testRemoveUsersFromRule() {
    // for Xacml
    module_load_include('inc', 'islandora_xacml_api', 'Xacml'); 

    // instantiate the xacml object
    $xacml = new Xacml();

    // add dummy users using an array
    $user_array = array('foo', 'bar', 'baz', 'boo');
    $xacml->managementRule->addUser($user_array);

    // remove some of the dummy users
    $to_remove = array_slice($user_array, 2);
    $xacml->managementRule->removeUser($to_remove);

    // assert the removed users are not in the rule
    $rule_users = $xacml->managementRule->getUsers();
    for ($i = 0; $i < 2; $i++) {
      $this->assertTrue(in_array($user_array[$i], $rule_users), "User {$user_array[$i]} has not been removed from rule and still is in users array");
    }

    // assert the others remain
    for ($i = 2; $i < count($user_array); $i++) {
      $this->assertFalse(in_array($user_array[$i], $rule_users), "User {$user_array[$i]} has been removed from rule and is not in users array");
    }

    // get an DOMXPath to search the Xacml
    $xpath = $this->constructXPathForXacml($xacml);

    // search the DOM for the dummy users that remain and ensure they are present 
    for ($i = 0; $i < 2; $i++) {
      $query = "/ns:Policy/ns:Rule[@RuleId='deny-management-functions' and @Effect='Deny']/ns:Condition/ns:Apply/ns:Apply/ns:Apply/ns:AttributeValue[text()='{$user_array[$i]}']";
      $results = $xpath->query($query)->item(0);
      $this->assertNotNull($results, "The query for user {$user_array[$i]} return non-null results"); 
      $this->assertEqual($results->nodeValue, $user_array[$i], "Search result's nodeValue is equal to '{$user_array[$i]}'");
    }

    // search the DOM for the removed dummy users in the management rule
    // and ensure they are not present
    for ($i = 2; $i < count($user_array); $i++) {
      $query = "/ns:Policy/ns:Rule[@RuleId='deny-management-functions' and @Effect='Deny']/ns:Condition/ns:Apply/ns:Apply/ns:Apply/ns:AttributeValue[text()='{$user_array[$i]}']";
      $results = $xpath->query($query)->item(0);
      $this->assertNull($results, "The query for user {$user_array[$i]} returns null results"); 
    }
  }

  /**
   *  Asserts that when a role is added to an XacmlRule, 
   *  that role appears in both the rule's roles array and
   *  the resultant DOM.
   */
  public function testAddRoleToRule() {
    // for Xacml
    module_load_include('inc', 'islandora_xacml_api', 'Xacml'); 

    // instantiate the xacml object
    $xacml = new Xacml();

    // add a dummy role
    $role_name = 'foo';
    $xacml->managementRule->addRole($role_name);

    // make sure the dummy role is in the roles array of the rule
    $rule_roles = $xacml->managementRule->getRoles();
    $this->assertTrue(in_array($role_name, $rule_roles), "Role $role_name is in XacmlRule's roles array");

    // get an DOMXPath to search the Xacml
    $xpath = $this->constructXPathForXacml($xacml);

    // search the DOM for the dummy role in the management rule
    $query = "/ns:Policy/ns:Rule[@RuleId='deny-management-functions' and @Effect='Deny']/ns:Condition/ns:Apply/ns:Apply/ns:Apply/ns:AttributeValue[text()='$role_name']";
    $results = $xpath->query($query)->item(0);

    // assert
    $this->assertNotNull($results, "The query for role $role_name return non-null results"); 
    $this->assertEqual($results->nodeValue, $role_name, "Search result's nodeValue is equal to '$role_name'");
  }

  /**
   *  Asserts that when a roles are added to an XacmlRule
   *  using an array, that roles appear in both the rule's 
   *  roles array and the resultant DOM.
   */
  public function testAddRolesToRule() {
    // for Xacml
    module_load_include('inc', 'islandora_xacml_api', 'Xacml'); 

    // instantiate the xacml object
    $xacml = new Xacml();

    // add dummy roles using an array
    $role_array = array('foo', 'bar');
    $xacml->managementRule->addRole($role_array);

    // make sure the dummy roles are in the roles array of the rule
    $rule_roles = $xacml->managementRule->getRoles();
    for ( $i = 0; $i < count($role_array); $i++ ) {
      $this->assertTrue(in_array($role_array[$i], $rule_roles), "User {$role_array[$i]} is in the XacmlRule's roles array");
    }

    // get an DOMXPath to search the Xacml
    $xpath = $this->constructXPathForXacml($xacml);

    // search the DOM for the dummy roles in the management rule
    // and assert their existence
    for ( $i = 0; $i < count($role_array); $i++ ) {
      $query = "/ns:Policy/ns:Rule[@RuleId='deny-management-functions' and @Effect='Deny']/ns:Condition/ns:Apply/ns:Apply/ns:Apply/ns:AttributeValue[text()='{$role_array[$i]}']";
      $results = $xpath->query($query)->item(0);
     
      $this->assertNotNull($results, "The query for role {$role_array[$i]} return non-null results"); 
      $this->assertEqual($results->nodeValue, $role_array[$i], "Search result's nodeValue is equal to '{$role_array[$i]}'");
    }
  }

  /**
   *  Asserts that when a role is removed from an XacmlRule that the role 
   *  no longer appears in the rule's roles array nor the resultant DOM
   */
  public function testRemoveRoleFromRule() {
    // for Xacml
    module_load_include('inc', 'islandora_xacml_api', 'Xacml'); 

    // instantiate the xacml object
    $xacml = new Xacml();

    // add dummy roles using an array
    $role_array = array('foo', 'bar');
    $xacml->managementRule->addRole($role_array);

    // remove one of the dummy roles
    $xacml->managementRule->removeRole($role_array[0]);

    // assert the removed role is not in the rule,
    // while the other remains
    $rule_roles = $xacml->managementRule->getRoles();
    $this->assertFalse(in_array($role_array[0], $rule_roles), "Role {$role_array[0]} has been removed from rule and is not in roles array");
    $this->assertTrue(in_array($role_array[1], $rule_roles), "Role {$role_array[1]} has not been removed from rule and still is in roles array");

    // get an DOMXPath to search the Xacml
    $xpath = $this->constructXPathForXacml($xacml);

    // search the DOM for the removed dummy role in the management rule
    // and ensure it is not present
    $query = "/ns:Policy/ns:Rule[@RuleId='deny-management-functions' and @Effect='Deny']/ns:Condition/ns:Apply/ns:Apply/ns:Apply/ns:AttributeValue[text()='{$role_array[0]}']";
    $results = $xpath->query($query)->item(0);
    $this->assertNull($results, "The query for role {$role_array[0]} returns null results"); 

    // search the DOM for the dummy role that remains and ensure it is present 
    $query = "/ns:Policy/ns:Rule[@RuleId='deny-management-functions' and @Effect='Deny']/ns:Condition/ns:Apply/ns:Apply/ns:Apply/ns:AttributeValue[text()='{$role_array[1]}']";
    $results = $xpath->query($query)->item(0);
    $this->assertNotNull($results, "The query for role {$role_array[1]} return non-null results"); 
    $this->assertEqual($results->nodeValue, $role_array[1], "Search result's nodeValue is equal to '{$role_array[1]}'");
  }

  /**
   *  Asserts that when roles are removed from an XacmlRule using an array
   *  that the roles no longer appear in the rule's roles array nor the 
   *  resultant DOM
   */
  public function testRemoveRolesFromRule() { 
    // for Xacml
    module_load_include('inc', 'islandora_xacml_api', 'Xacml'); 

    // instantiate the xacml object
    $xacml = new Xacml();

    // add dummy roles using an array
    $role_array = array('foo', 'bar', 'baz', 'boo');
    $xacml->managementRule->addRole($role_array);

    // remove some of the dummy roles
    $to_remove = array_slice($role_array, 2);
    $xacml->managementRule->removeRole($to_remove);

    // assert the removed roles are not in the rule
    $rule_roles = $xacml->managementRule->getRoles();
    for ($i = 0; $i < 2; $i++) {
      $this->assertTrue(in_array($role_array[$i], $rule_roles), "Role {$role_array[$i]} has not been removed from rule and still is in roles array");
    }

    // assert the others remain
    for ($i = 2; $i < count($role_array); $i++) {
      $this->assertFalse(in_array($role_array[$i], $rule_roles), "Role {$role_array[$i]} has been removed from rule and is not in roles array");
    }

    // get an DOMXPath to search the Xacml
    $xpath = $this->constructXPathForXacml($xacml);

    // search the DOM for the dummy roles that remain and ensure they are present 
    for ($i = 0; $i < 2; $i++) {
      $query = "/ns:Policy/ns:Rule[@RuleId='deny-management-functions' and @Effect='Deny']/ns:Condition/ns:Apply/ns:Apply/ns:Apply/ns:AttributeValue[text()='{$role_array[$i]}']";
      $results = $xpath->query($query)->item(0);
      $this->assertNotNull($results, "The query for role {$role_array[$i]} return non-null results"); 
      $this->assertEqual($results->nodeValue, $role_array[$i], "Search result's nodeValue is equal to '{$role_array[$i]}'");
    }

    // search the DOM for the removed dummy roles in the management rule
    // and ensure they are not present
    for ($i = 2; $i < count($role_array); $i++) {
      $query = "/ns:Policy/ns:Rule[@RuleId='deny-management-functions' and @Effect='Deny']/ns:Condition/ns:Apply/ns:Apply/ns:Apply/ns:AttributeValue[text()='{$role_array[$i]}']";
      $results = $xpath->query($query)->item(0);
      $this->assertNull($results, "The query for role {$role_array[$i]} returns null results"); 
    }

  }

}
